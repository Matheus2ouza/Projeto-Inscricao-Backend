generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Accounts {
  id        String   @id @default(uuid())
  username  String   @unique
  role      roleType
  password  String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  regionId    String?
  region      Regions?      @relation(fields: [regionId], references: [id])
  Inscription Inscription[]

  @@map("accounts")
}

model Regions {
  id                 String   @id @default(uuid())
  name               String   @unique
  outstandingBalance Decimal  @default(0.00) @map("outstanding_balance") @db.Decimal(10, 2)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  accounts Accounts[]
  events   Events[]

  @@map("regions")
}

model Events {
  id                   String             @id @default(uuid())
  name                 String
  quantityParticipants Int                @default(0) @map("quantity_participants")
  amountCollected      Decimal            @default(0.00) @map("amount_collected") @db.Decimal(10, 2)
  startDate            DateTime           @map("start_date")
  endDate              DateTime           @map("end_date")
  imageUrl             String?            @map("image_url")
  location             String?
  latitude             Float?
  longitude            Float?
  status               statusEvent
  createdAt            DateTime           @default(now())
  updatedAt            DateTime           @updatedAt
  regionId             String
  region               Regions            @relation(fields: [regionId], references: [id])
  typeInscriptions     TypeInscriptions[]
  Inscription          Inscription[]

  @@map("events")
}

model TypeInscriptions {
  id          String   @id @default(uuid())
  description String
  value       Decimal  @db.Decimal(10, 2)
  eventId     String   @map("event_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  event       Events        @relation(fields: [eventId], references: [id])
  Participant Participant[]

  @@map("type_inscriptions")
}

model Inscription {
  id          String            @id @default(uuid())
  accountId   String            @map("account_id")
  eventId     String            @map("event_id")
  responsible String
  phone       String
  totalValue  Decimal           @db.Decimal(10, 2)
  status      InscriptionStatus @default(PENDING)
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  account      Accounts      @relation(fields: [accountId], references: [id])
  event        Events        @relation(fields: [eventId], references: [id])
  participants Participant[]

  @@map("inscriptions")
}

model Participant {
  id                String   @id @default(uuid())
  inscriptionId     String   @map("inscription_id")
  typeInscriptionId String   @map("type_inscription_id")
  name              String
  birthDate         DateTime @map("birth_date")
  gender            String
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")

  inscription     Inscription      @relation(fields: [inscriptionId], references: [id])
  typeInscription TypeInscriptions @relation(fields: [typeInscriptionId], references: [id])

  @@map("participants")
}

enum InscriptionStatus {
  PENDING
  UNDER_REVIEW
  PAID
  CANCELLED
}

enum roleType {
  SUPER
  ADMIN
  MANAGER
  USER
}

enum statusEvent {
  OPEN
  CLOSE
  FINALIZED
}

version: '3.8'

# Docker Compose para simular Heroku Eco Dyno
# Configuração otimizada para produção com limites de recursos similares ao Heroku

services:
  # Serviço principal da aplicação NestJS
  web:
    # Imagem otimizada da aplicação (versão distroless)
    image: api-inscricao-nest:optimized
    
    # Nome do container para fácil identificação
    container_name: api-inscricao-web
    
    # Mapeamento de portas: host:container
    ports:
      - "3000:3000"
    
    # Variáveis de ambiente de produção
    environment:
      # Ambiente de produção
      - NODE_ENV=production
      # Porta da aplicação
      - PORT=3000
      # Variáveis do banco de dados (serão lidas do .env)
      - DATABASE_URL=${DATABASE_URL}
      # Variáveis JWT (serão lidas do .env)
      - JWT_AUTH_SECRECT=${JWT_AUTH_SECRECT}
      - JWT_REFRESH_SECRET=${JWT_REFRESH_SECRET}
    
    # Carrega todas as variáveis do arquivo .env
    env_file:
      - .env
    
    # Limites de recursos similares ao Heroku Eco Dyno
    deploy:
      resources:
        limits:
          # Memória máxima: 512MB (Heroku Eco Dyno)
          memory: 512M
          # CPU máxima: 0.5 cores (50% de um core)
          cpus: '0.5'
        reservations:
          # Reserva mínima de memória
          memory: 256M
          # Reserva mínima de CPU
          cpus: '0.25'
    
    # Política de reinício: sempre reinicia se parar
    restart: always
    
    # Configurações de segurança (modo não privilegiado)
    security_opt:
      # Remove capacidades privilegiadas
      - no-new-privileges:true
    
    # Usuário não-root (simula ambiente seguro do Heroku)
    user: "nonroot:nonroot"
    
    # Configurações de rede
    networks:
      - app-network
    
    # Configurações de logging
    logging:
      driver: "json-file"
      options:
        # Limite de tamanho do log: 10MB
        max-size: "10m"
        # Manter apenas 3 arquivos de log
        max-file: "3"
    
    # Health check para verificar se a aplicação está funcionando
    healthcheck:
      # Comando para verificar se a aplicação responde
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/health", "||", "exit", "1"]
      # Intervalo entre verificações: 30 segundos
      interval: 30s
      # Timeout para cada verificação: 10 segundos
      timeout: 10s
      # Número de tentativas antes de considerar não saudável: 3
      retries: 3
      # Tempo de espera antes da primeira verificação: 40 segundos
      start_period: 40s
    
    # Configurações de volumes (apenas para logs, não código fonte)
    volumes:
      # Volume para logs da aplicação
      - app-logs:/app/logs:rw
    
    # Configurações de dependências (se houver banco de dados)
    # depends_on:
    #   - postgres
    
    # Configurações de labels para organização
    labels:
      - "com.example.description=API de Inscrição NestJS"
      - "com.example.version=1.0"
      - "com.example.environment=production"

# Volumes para persistência de dados
volumes:
  # Volume para logs da aplicação
  app-logs:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: ./logs

# Redes para comunicação entre serviços
networks:
  # Rede principal da aplicação
  app-network:
    driver: bridge
    # Configurações de rede otimizadas
    ipam:
      config:
        - subnet: 172.20.0.0/16

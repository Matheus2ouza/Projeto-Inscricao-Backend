#!/bin/bash

# Script de Verifica√ß√£o de Seguran√ßa
# Verifica se h√° arquivos sens√≠veis e configura√ß√µes de seguran√ßa

set -e

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

echo -e "${BLUE}üîí Verifica√ß√£o de Seguran√ßa - API Inscri√ß√£o NestJS${NC}"
echo "=================================================="
echo ""

# Contador de problemas
ISSUES=0
WARNINGS=0

# Fun√ß√£o para incrementar contadores
increment_issue() {
    ((ISSUES++))
}

increment_warning() {
    ((WARNINGS++))
}

# 1. Verificar arquivos sens√≠veis no Git
echo -e "${BLUE}üìÅ Verificando arquivos sens√≠veis no Git...${NC}"
SENSITIVE_FILES=$(git ls-files 2>/dev/null | grep -E "\.(env|key|crt|pem|secret|password)$" || true)

if [ -n "$SENSITIVE_FILES" ]; then
    echo -e "${RED}‚ùå ARQUIVOS SENS√çVEIS ENCONTRADOS NO GIT:${NC}"
    echo "$SENSITIVE_FILES"
    echo -e "${RED}‚ö†Ô∏è  REMOVA ESTES ARQUIVOS DO GIT IMEDIATAMENTE!${NC}"
    increment_issue
else
    echo -e "${GREEN}‚úÖ Nenhum arquivo sens√≠vel encontrado no Git${NC}"
fi
echo ""

# 2. Verificar se .env existe
echo -e "${BLUE}üîê Verificando arquivo .env...${NC}"
if [ -f ".env" ]; then
    echo -e "${GREEN}‚úÖ Arquivo .env encontrado${NC}"
    
    # Verificar se .env est√° no .gitignore
    if git check-ignore .env >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Arquivo .env est√° no .gitignore${NC}"
    else
        echo -e "${RED}‚ùå Arquivo .env N√ÉO est√° no .gitignore${NC}"
        increment_issue
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Arquivo .env n√£o encontrado${NC}"
    echo -e "${BLUE}üí° Execute: cp env.example .env${NC}"
    increment_warning
fi
echo ""

# 3. Verificar credenciais hardcoded
echo -e "${BLUE}üîç Verificando credenciais hardcoded...${NC}"
# Procurar por strings literais que parecem senhas ou chaves
HARDCODED_CREDS=$(grep -r -E "['\"][a-zA-Z0-9]{20,}['\"]" src/ --exclude-dir=node_modules 2>/dev/null | grep -v "//" | grep -v "import" | grep -v "require" | grep -v "process.env" || true)

if [ -n "$HARDCODED_CREDS" ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  Poss√≠veis credenciais hardcoded encontradas:${NC}"
    echo "$HARDCODED_CREDS" | head -5
    if [ $(echo "$HARDCODED_CREDS" | wc -l) -gt 5 ]; then
        echo "... e mais $(($(echo "$HARDCODED_CREDS" | wc -l) - 5)) linhas"
    fi
    increment_warning
else
    echo -e "${GREEN}‚úÖ Nenhuma credencial hardcoded encontrada${NC}"
fi
echo ""

# 4. Verificar depend√™ncias vulner√°veis
echo -e "${BLUE}üì¶ Verificando vulnerabilidades nas depend√™ncias...${NC}"
if command -v npm >/dev/null 2>&1; then
    VULNERABILITIES=$(npm audit --audit-level=moderate --json 2>/dev/null | grep -c "vulnerabilities" || echo "0")
    
    if [ "$VULNERABILITIES" -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  Vulnerabilidades encontradas nas depend√™ncias${NC}"
        echo -e "${BLUE}üí° Execute: npm audit fix${NC}"
        increment_warning
    else
        echo -e "${GREEN}‚úÖ Nenhuma vulnerabilidade cr√≠tica encontrada${NC}"
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  npm n√£o encontrado, pulando verifica√ß√£o de vulnerabilidades${NC}"
fi
echo ""

# 5. Verificar configura√ß√µes Docker
echo -e "${BLUE}üê≥ Verificando configura√ß√µes Docker...${NC}"
if [ -f "docker-compose.yml" ]; then
    echo -e "${GREEN}‚úÖ docker-compose.yml encontrado${NC}"
    
    # Verificar se roda como n√£o-root
    if grep -q "user:" docker-compose.yml; then
        echo -e "${GREEN}‚úÖ Container configurado para rodar como n√£o-root${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Container n√£o especifica usu√°rio n√£o-root${NC}"
        increment_warning
    fi
    
    # Verificar limites de recursos
    if grep -q "memory:" docker-compose.yml; then
        echo -e "${GREEN}‚úÖ Limites de mem√≥ria configurados${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Limites de mem√≥ria n√£o configurados${NC}"
        increment_warning
    fi
    
    # Verificar restart policy
    if grep -q "restart:" docker-compose.yml; then
        echo -e "${GREEN}‚úÖ Restart policy configurada${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Restart policy n√£o configurada${NC}"
        increment_warning
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  docker-compose.yml n√£o encontrado${NC}"
    increment_warning
fi
echo ""

# 6. Verificar permiss√µes de arquivos
echo -e "${BLUE}üîê Verificando permiss√µes de arquivos...${NC}"
SENSITIVE_PERMS=$(find . -name "*.env*" -o -name "*.key" -o -name "*.pem" -o -name "*.crt" 2>/dev/null | xargs ls -la 2>/dev/null | grep -E "^-rw-rw-rw-|^-rwxrwxrwx" || true)

if [ -n "$SENSITIVE_PERMS" ]; then
    echo -e "${RED}‚ùå Arquivos sens√≠veis com permiss√µes muito abertas:${NC}"
    echo "$SENSITIVE_PERMS"
    echo -e "${BLUE}üí° Execute: chmod 600 arquivo_sensivel${NC}"
    increment_issue
else
    echo -e "${GREEN}‚úÖ Permiss√µes de arquivos sens√≠veis adequadas${NC}"
fi
echo ""

# 7. Verificar configura√ß√µes de banco de dados
echo -e "${BLUE}üóÑÔ∏è  Verificando configura√ß√µes de banco de dados...${NC}"
if [ -f "prisma/schema.prisma" ]; then
    echo -e "${GREEN}‚úÖ Schema do Prisma encontrado${NC}"
    
    # Verificar se usa SSL
    if grep -q "ssl" prisma/schema.prisma; then
        echo -e "${GREEN}‚úÖ SSL configurado no schema${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  SSL n√£o configurado no schema${NC}"
        increment_warning
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Schema do Prisma n√£o encontrado${NC}"
    increment_warning
fi
echo ""

# 8. Verificar logs
echo -e "${BLUE}üìã Verificando configura√ß√µes de logs...${NC}"
if [ -d "logs" ]; then
    echo -e "${GREEN}‚úÖ Pasta de logs encontrada${NC}"
    
    # Verificar se logs est√£o no .gitignore
    if git check-ignore logs >/dev/null 2>&1; then
        echo -e "${GREEN}‚úÖ Pasta de logs est√° no .gitignore${NC}"
    else
        echo -e "${YELLOW}‚ö†Ô∏è  Pasta de logs N√ÉO est√° no .gitignore${NC}"
        increment_warning
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è  Pasta de logs n√£o encontrada${NC}"
    increment_warning
fi
echo ""

# Resumo
echo "=================================================="
echo -e "${BLUE}üìä RESUMO DA VERIFICA√á√ÉO DE SEGURAN√áA${NC}"
echo "=================================================="

if [ $ISSUES -eq 0 ] && [ $WARNINGS -eq 0 ]; then
    echo -e "${GREEN}üéâ EXCELENTE! Nenhum problema de seguran√ßa encontrado.${NC}"
    echo -e "${GREEN}‚úÖ Seu projeto est√° seguindo as boas pr√°ticas de seguran√ßa.${NC}"
    exit 0
elif [ $ISSUES -eq 0 ]; then
    echo -e "${YELLOW}‚ö†Ô∏è  ATEN√á√ÉO: $WARNINGS avisos encontrados.${NC}"
    echo -e "${BLUE}üí° Revise os avisos acima para melhorar a seguran√ßa.${NC}"
    exit 0
else
    echo -e "${RED}üö® PROBLEMAS CR√çTICOS: $ISSUES problemas encontrados.${NC}"
    echo -e "${RED}‚ùå CORRIJA OS PROBLEMAS ACIMA ANTES DE CONTINUAR.${NC}"
    if [ $WARNINGS -gt 0 ]; then
        echo -e "${YELLOW}‚ö†Ô∏è  E tamb√©m $WARNINGS avisos para revisar.${NC}"
    fi
    exit 1
fi
